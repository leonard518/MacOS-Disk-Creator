#!/bin/bash

echo "==============================================="
echo "CloverEFI Post-Install Script"
echo "==============================================="

#echo "DEBUG: $ 1 = Full path to the installation package the installer app is processing: " $1
#echo "DEBUG: $ 2 = Full path to the installation destination: " $2
#echo "DEBUG: $ 3 = Installation volume (mountpoint) to receive the payload: " $3
#echo "DEBUG: $ 4 = Root directory for the system: " $4

echo "preinstall: Path to installer....... $1"
echo "preinstall: Path to destination..... $2"
echo "preinstall: Path to dest volume..... $3"
echo "preinstall: Root of system folder... $4"

#############################################################################

DEST_VOL="${3}"
EFI_ROOT_DIR=$(cd "${DEST_VOL}"/EFIROOTDIR; pwd -P)
CLOVER_INSTALLER_PLIST_NEW="${DEST_VOL}/Library/Preferences/com.projectosx.clover.installer.plist.new"

install_log="${DEST_VOL}/Clover_Install_Log.txt"
installer_choice="org.clover.cloverefi.64.sata"

boottype='x64'
cloverEFIFile='boot6'

echo "$boottype" > "${DEST_VOL}/boottype"

if [[ -f "${DEST_VOL}/usr/standalone/i386/$boottype/$cloverEFIFile" ]]; then
    cp -v "${DEST_VOL}/usr/standalone/i386/$boottype/$cloverEFIFile" "${EFI_ROOT_DIR}/boot"
    #chflags hidden "${EFI_ROOT_DIR}/boot"
    echo "Stage 2 - Written $cloverEFIFile ($boottype) to ${EFI_ROOT_DIR}/boot" >> "$install_log"
fi

# Mark that the option was selected
/usr/libexec/PlistBuddy -c "Add $installer_choice bool true" "$CLOVER_INSTALLER_PLIST_NEW" >/dev/null

echo "==============================================="
diskloader="boot0af"

DEST_VOL="${3}"
EFI_ROOT_DIR=$(cd "${DEST_VOL}"/EFIROOTDIR; pwd -P)
CLOVER_INSTALLER_PLIST_NEW="${DEST_VOL}/Library/Preferences/com.projectosx.clover.installer.plist.new"
install_log="${DEST_VOL}/Clover_Install_Log.txt"
plistbuddy='/usr/libexec/PlistBuddy'
installer_choice="org.clover.bootloader.boot0af"
installer_altboot_refid='org.clover.bootloader.altboot'

bootvolume="$EFI_ROOT_DIR"
echo "Boot Volume is $bootvolume"

if [ -z "${bootvolume}" ]; then
    echo
    echo "Cannot find the volume. Exiting."
    echo
    exit
fi

bootdev=$(LC_ALL=C diskutil info "$bootvolume" 2>/dev/null | \
 sed -n 's/.*Device Node: *//p')
bootrdev=${bootdev/disk/rdisk}

if [ "${bootdev}" = "${bootdev#*disk*s}" ]; then
    echo
    echo "ERROR Volume does not use slices."
    echo
    exit
fi

bootdisk=${bootdev%s*}
bootrdisk=${bootdisk/disk/rdisk}
bootslice=${bootdev#*disk*s}

# Get the options for alternative booting
altBoot=$($plistbuddy -c "Print $installer_altboot_refid" \
 "$CLOVER_INSTALLER_PLIST_NEW" 2>/dev/null)
if [[ "$altBoot" == true ]]; then
    partitionloaderhfs="boot1h2"
    partitionloaderfat="boot1f32alt"
else
    partitionloaderhfs="boot1h"
    partitionloaderfat="boot1f32"
fi

echo "==============================================="
echo "Installer Variables:"
echo "********************"
echo "bootvolume: Volume is ${bootvolume}"
echo "bootdev: Volume device is ${bootdev}"
echo "bootrdev: Volume raw device is ${bootrdev}"
echo "bootslice: Volume slice is ${bootslice}"
echo "bootdisk: Disk device is ${bootdisk}"
echo "bootrdisk: Disk raw device is ${bootrdisk}"
echo "diskloader: Disk loader is ${diskloader}"
echo "partitionloaderhfs: Partition loader is ${partitionloaderhfs}"
echo "partitionloaderfat: Partition loader is ${partitionloaderfat}"
echo "-----------------------------------------------"
echo ""
echo ""

# Installing fdisk440 in /usr/local/bin if not exists
if [ ! -e "/usr/local/bin/fdisk440" ]; then
    mkdir -p /usr/local/bin
    cp -f "${DEST_VOL}/usr/local/bin/fdisk440" /usr/local/bin/fdisk440
fi

echo "==============================================="
echo "Check partition scheme"
echo "==============================================="
bootdisk_partition_scheme=$(LC_ALL=C diskutil info "$bootdisk" 2>/dev/null | \
 sed -nE 's/.*(Partition Type|Content \(IOContent\)): *//p')

case "$bootdisk_partition_scheme" in
    FDisk_partition_scheme)
        echo "${bootdev} use MBR partition scheme"
        bootdisk_partition_scheme="mbr"
        ;;
    GUID_partition_scheme)
        echo "${bootdev} use GPT/Hybrid GPT partition scheme"
        bootdisk_partition_scheme="gpt"
        ;;
     *) echo "ERROR: $bootdev use an unsupported partition scheme: $bootdisk_partition_scheme"
        echo "ERROR: $bootdev use an unsupported partition scheme: $bootdisk_partition_scheme" >> "$install_log"
        exit 1
        ;;
esac
echo ""

echo "==============================================="
echo "Check the format of the selected partition"
echo "==============================================="

boot_volume_format="$(fstyp $bootdev)"
case "$boot_volume_format" in
      hfs) echo "${bootdev} is currently formatted as HFS"   ;;
    msdos) echo "${bootdev} is currently formatted as msdos" ;;
esac
echo ""

echo "======================================================" >> "$install_log"
echo "Installing BootSectors/BootLoader" >> "$install_log"
echo "" >> "$install_log"
partitionactive=$( /usr/local/bin/fdisk440 -d ${bootrdisk} | grep -n "*" | awk -F: '{print $1}')
if [[ -n "$partitionactive" ]]; then
    echo "Current Active Partition: ${partitionactive}" >> "$install_log"
else
    echo "No Active Partition" >> "$install_log"
fi
echo "" >> "$install_log"

### Stage 0 ###
echo "Stage 0 - Writting ${diskloader} to ${bootdisk}" >> "$install_log"
echo "/usr/local/bin/fdisk440 -u -f ${DEST_VOL}/usr/standalone/i386/${diskloader} -y ${bootdisk}" >> "$install_log"
/usr/local/bin/fdisk440 -u -f "${DEST_VOL}/usr/standalone/i386/${diskloader}" -y ${bootdisk}
echo "" >> "$install_log"

### Stage 1 ###

# Try to located the partition first

if [[ ${boot_volume_format} = "hfs" ]]; then
    echo "Stage 1 - Writting ${partitionloaderhfs} to ${bootrdev}" >> "$install_log"
    echo "File system is HFS." >> "$install_log"
    echo "dd if=${DEST_VOL}/usr/standalone/i386/${partitionloaderhfs} of=${bootrdev}" >> "$install_log"
    dd if="${DEST_VOL}/usr/standalone/i386/${partitionloaderhfs}" of=${bootrdev}

elif [[ ${boot_volume_format} = "msdos" ]]; then
    echo "Stage 1 - Writting ${partitionloaderfat} to ${bootrdev}" >> "$install_log"
    echo "File system is Fat32." >> "$install_log"

    # copy partition boot sector to origbs
    echo "dd if=${bootrdev} count=1 bs=512 of=/tmp/origbs" >> "$install_log"
    dd if=${bootrdev} count=1 bs=512 of=/tmp/origbs

    # copy boot1f32 to newbs
    echo "cp ${DEST_VOL}/usr/standalone/i386/${partitionloaderfat} /tmp/newbs" >> "$install_log"
    cp -f "${DEST_VOL}/usr/standalone/i386/${partitionloaderfat}" /tmp/newbs

    # "merge" origbs into newbs
    echo "dd if=/tmp/origbs of=/tmp/newbs skip=3 seek=3 bs=1 count=87 conv=notrunc" >> "$install_log"
    dd if=/tmp/origbs of=/tmp/newbs skip=3 seek=3 bs=1 count=87 conv=notrunc

    # write newbs to the partition boot sector
    echo "dd if=/tmp/newbs of=${bootrdev}" >> "$install_log"
    dd if=/tmp/newbs count=1 bs=512 of=${bootrdev}
else
    echo "Unknown boot volume format: $boot_volume_format" >> "$install_log"
    echo "No Stage1 was written" >> "$install_log"
fi

# Now try to remount the partition
[[ -n "$mnt_pt" ]] && mount -t "$boot_volume_format" "$bootdev" "$mnt_pt"

echo "" >> "$install_log"

if [[ "$bootdisk_partition_scheme" == mbr && "$diskloader" == boot0af ]]; then
    echo "Setup Active Partition to be: ${bootslice}" >> "$install_log"
    "/usr/local/bin/fdisk440" -e ${bootrdisk} <<-MAKEACTIVE
print
flag ${bootslice}
write
y
quit
MAKEACTIVE

    partitionactive=$( /usr/local/bin/fdisk440 -d ${bootrdisk} | grep -n "*" | awk -F: '{print $1}')
    echo "New Active Partition: ${partitionactive}" >> "$install_log"
    echo "" >> "$install_log"
fi

# Mark that the option was selected
$plistbuddy -c "Add $installer_choice bool true" "$CLOVER_INSTALLER_PLIST_NEW" >/dev/null

# Clean Up
rm -f /tmp/origbs /tmp/newbs



echo "==============================================="

#echo "DEBUG: $ 1 = Full path to the installation package the installer app is processing: " $1
#echo "DEBUG: $ 2 = Full path to the installation destination: " $2
#echo "DEBUG: $ 3 = Installation volume (mountpoint) to receive the payload: " $3
#echo "DEBUG: $ 4 = Root directory for the system: " $4

echo "preinstall: Path to installer....... $1"
echo "preinstall: Path to destination..... $2"
echo "preinstall: Path to dest volume..... $3"
echo "preinstall: Root of system folder... $4"

#############################################################################

DEST_VOL="${3}"
EFI_ROOT_DIR=$(cd "${DEST_VOL}"/EFIROOTDIR; pwd -P)
CLOVER_INSTALLER_PLIST_NEW="${DEST_VOL}/Library/Preferences/com.projectosx.clover.installer.plist.new"
CLOVER_INSTALLER_PLIST="${DEST_VOL}/Library/Preferences/com.projectosx.clover.installer.plist"
bootervolumename="EFI"
bootvolume="/Volumes/${bootervolumename}"
install_log="${DEST_VOL}/Clover_Install_Log.txt"
config_plist_file="${EFI_ROOT_DIR}"/EFI/CLOVER/config.plist
plistbuddy='/usr/libexec/PlistBuddy'

echo "" >> "${install_log}"

# Change config.plist if needed
boottype=$( cat "${DEST_VOL}/boottype" )

case "${boottype}" in
    ia32) perl -i -p -e "s/arch=x86_64/arch=i386/g" "${config_plist_file}" ;;
     x64) perl -i -p -e "s/arch=i386/arch=x86_64/g" "${config_plist_file}" ;;
esac

# Store last install revision
$plistbuddy -c "Add CloverRevision integer 3696" "$CLOVER_INSTALLER_PLIST_NEW" >/dev/null

# Get theme from config.plist
config_theme=''
if [[ -f "$config_plist_file" ]]; then
    config_theme=$( $plistbuddy -c "Print :GUI:Theme" "$config_plist_file" 2>/dev/null )
fi

# Check if theme is found
theme_found=0
themes_installed=()

# Store installed themes
$plistbuddy -c "Add InstalledThemes array" "$CLOVER_INSTALLER_PLIST_NEW" >/dev/null
index=0
while read -r -u3 theme_plist; do
    theme=${theme_plist%/*}
    theme=${theme##*/}
    $plistbuddy -c "Add InstalledThemes:$index string $theme" "$CLOVER_INSTALLER_PLIST_NEW" >/dev/null
    [[ -n "config_theme" && "$config_theme" == "$theme" ]] && theme_found=1
    themes_installed+=("$theme")
    index=$((index + 1))
done 3< <(find "${EFI_ROOT_DIR}"/EFI/CLOVER/themes -iname 'theme.plist' 2>/dev/null)

# Replace theme if theme directory not found
if [[ "$theme_found" -eq 0 ]]; then
    [[ -n "$config_theme" ]] && echo "Theme '$config_theme' (defined in config.plist) not found !" >> "${install_log}"
    default_theme=${themes_installed[0]}
    if [[ -n "$default_theme" ]]; then
        echo "Using default theme '$default_theme'" >> "${install_log}"
        $plistbuddy -c "Delete :GUI:Theme" "$config_plist_file" &>/dev/null
        $plistbuddy -c "Add :GUI:Theme string $default_theme" "$config_plist_file" 2>&1 >> "${install_log}"
    fi
fi

echo "======================================================" >> "${install_log}"
echo "=========== Clover EFI Installation Finish ===========" >> "${install_log}"
echo "======================================================" >> "${install_log}"

# ---------------------------------------------
# Cleanup
# ---------------------------------------------

if [[ -e "$install_log" && -d "${EFI_ROOT_DIR}/EFI" ]]; then
    mv -f "$install_log" "${EFI_ROOT_DIR}/EFI/Clover_Install_Log.txt"
fi

if [[ -f "$CLOVER_INSTALLER_PLIST_NEW" ]]; then
    mv -f "$CLOVER_INSTALLER_PLIST_NEW" "$CLOVER_INSTALLER_PLIST"
fi

# Clean up
rm -f "${DEST_VOL}/boottype"

# Remove link to the partition that contain the EFI folder
rm -f "${DEST_VOL}"/EFIROOTDIR
#############################################################################
raidx=`diskutil info "$3" | grep -o RAID | head -n 1`
if [ "$raidx" = "RAID" ]; then
	{
	echo "RAID root volume detected"
	raidid=`diskutil info "$3" | grep RAID | grep UUID | awk '{print $4}'`
	rdp=`diskutil appleRAID list $raidid | grep "0  d" | awk '{print $2}'`
	dn=`echo $rdp | sed 's/disk//' | sed 's/s[0-9]//'`
	devd=`echo "/dev/disk"$dn`
	ddpe=`echo $devd"s1"`
	echo "The EFI partition of your RAID array's first disk is "$ddpe
	echo "Installing Clover UEFI bootloader to your target EFI partition.."
	echo " "
	mkdir -p /Volumes/EFI
	newfs_msdos -v EFI -F 32 $ddpe
	sleep 2
	mount -t msdos $ddpe /Volumes/EFI
	sleep 2
	cp -R /"$3"/EFI /Volumes/EFI/
        sed -i '' -e '14s/xccv/Boot\ OS\ X/' /Volumes/EFI/EFI/config.plist
	}
else
	{
	ddp=`mount | grep "$3 (" | awk '{print $1}'`
	devd=`echo $ddp | sed 's/s[0-9]//'`
	ddpe=`echo $devd"s1"`
	echo " "
	echo "The EFI partition of your target disk is "$ddpe
	echo "Installing Clover UEFI bootloader to your target EFI partition.."
	echo " "
	mkdir -p /Volumes/EFI
	newfs_msdos -v EFI -F 32 $ddpe
	sleep 2
	mount -t msdos $ddpe /Volumes/EFI
	sleep 2
	cp -R /"$3"/EFI /Volumes/EFI/
        vn=$(echo "$3" | sed 's/\/Volumes\///')
	sed -i '' -e '14s/xccv/'"$vn"'/' /Volumes/EFI/EFI/config.plist
	}
fi

#############################################################################

# copy
cp -R /"$3"/boot /Volumes/EFI/
cp -R /"$3"/boot3 /Volumes/EFI/
cp -R /"$3"/boot6 /Volumes/EFI/
cp -R /"$3"/boot7 /Volumes/EFI/

# remove 
rm -R "${3}/usr/standalone/i386/boot1xalt"
rm -R "${3}/usr/standalone/i386/boot0md"
rm -R "${3}/usr/standalone/i386/boot0af"
rm -R "${3}/usr/standalone/i386/boot0ss"
rm -R "${3}/usr/standalone/i386/boot1f32"
rm -R "${3}/usr/standalone/i386/boot1f32alt"
rm -R "${3}/usr/standalone/i386/boot1h"
rm -R "${3}/usr/standalone/i386/boot1h2"
rm -R "${3}/usr/standalone/i386/Description.txt"
rm -R "${3}/usr/standalone/i386/ia32"
rm -R "${3}/usr/standalone/i386/Installation.txt"
rm -R "${3}/usr/standalone/i386/x64"
rm -R "${3}/usr/standalone/i386/boot0af"
rm -R "${3}/usr/standalone/i386/boot1x"
rm -R "${3}/boot3"
rm -R "${3}/boot6"
rm -R "${3}/boot7"
rm -R "${3}/EFI"


exit
